CREATE TABLE IF NOT EXISTS user_table (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	email VARCHAR(100) NOT NULL,
	login VARCHAR(100) NOT NULL,
	name VARCHAR(100) DEFAULT '',
	birthdate DATE);

CREATE TABLE IF NOT EXISTS friendship_status (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(100) NOT NULL,
	description VARCHAR(200) DEFAULT '');

CREATE TABLE IF NOT EXISTS friends_link (
	user_id INT NOT NULL REFERENCES user_table(id),
	friend_id INT NOT NULL REFERENCES user_table(id),
	friendship_status_id INT NOT NULL REFERENCES friendship_status(id),
	PRIMARY KEY(user_id, friend_id));

CREATE TABLE IF NOT EXISTS mpa_rating (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(100));
CREATE UNIQUE INDEX IF NOT EXISTS mpa_rating_name_idx ON mpa_rating (name);

CREATE TABLE IF NOT EXISTS film (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(100) NOT NULL,
	description VARCHAR(200),
	release_date DATE,
	duration INT CHECK (duration > 0),
	mpa_rating_id INT REFERENCES mpa_rating(id));

CREATE TABLE IF NOT EXISTS genre (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(100));
CREATE UNIQUE INDEX IF NOT EXISTS genre_name_idx ON genre (name);

CREATE TABLE IF NOT EXISTS film_genre (
	film_id INT NOT NULL REFERENCES film(id),
	genre_id INT NOT NULL REFERENCES genre(id),
	PRIMARY KEY(film_id, genre_id));

CREATE TABLE IF NOT EXISTS film_likes_user_link (
	film_id INT NOT NULL REFERENCES film(id),
	user_id INT NOT NULL REFERENCES user_table(id),
	PRIMARY KEY(film_id, user_id));
